// /.netlify/functions/enviar-pedido.js
// Vers√£o com numera√ß√£o sequencial simples: 0, 1, 2, 3...

exports.handler = async (event, context) => {
  console.log('Fun√ß√£o iniciada - handler principal');
  
  // Handler para OPTIONS (CORS)
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      },
      body: ''
    };
  }

  // Chaves PIX (movidas do frontend)
  const CHAVES_PIX = {
    "3": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta52040000530398654043.005802BR5925Pedro Henrique Martins Te6009SAO PAULO61080540900062230519bxWWKAP3L3MfEsdk5xs6304BCE3",
    "7": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta52040000530398654047.005802BR5925Pedro Henrique Martins Te6009SAO PAULO61080540900062230519K1lfTZdOaqQZnr4k5xs63043A6A",
    "15": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta520400005303986540515.005802BR5925Pedro Henrique Martins Te6009SAO PAULO61080540900062230519nMTOKGa4plV0eHAk5xs63041D52",
    "25": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta520400005303986540525.005802BR5925Pedro Henrique Martins Te6009SAO PAULO610805409000622305192LyQj0fxzFevHHzk5xs6304E521",
    "50": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta520400005303986540550.005802BR5925Pedro Henrique Martins Te6009SAO PAULO61080540900062230519LCvJTaNZqjNTCNgk5xs63041B38",
    "100": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta5204000053039865406100.005802BR5925Pedro Henrique Martins Te6009SAO PAULO61080540900062230519B6t0QgiXEw6htoKk5xs63048E53",
    "outro": "00020126690014BR.GOV.BCB.PIX0136f4573753-c26d-4609-9610-89c810b03e310207gorjeta5204000053039865802BR5925Pedro Henrique Martins Te6009SAO PAULO62140510M5x3KrERij6304C4FC"
  };

  // Configura√ß√µes do Telegram e Google Sheets
  const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
  const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
  const PLANILHA_CSV_URL = process.env.PLANILHA_CSV_URL;

  try {
    // Parse dos dados recebidos do frontend
    const { nome, telefone, musica, gorjeta, outroValor, mensagem, consentimento } = JSON.parse(event.body);
    
    // Valida√ß√µes b√°sicas
    if (!nome || !musica) {
      return {
        statusCode: 400,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Headers': 'Content-Type',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          success: false, 
          error: 'Nome e m√∫sica s√£o obrigat√≥rios' 
        })
      };
    }

    // Processar gorjeta (l√≥gica movida do frontend)
    let valorGorjeta = '';
    let chavePix = '';
    
    if (gorjeta === 'outro' && outroValor) {
      valorGorjeta = outroValor;
      chavePix = CHAVES_PIX["outro"];
    } else if (gorjeta && CHAVES_PIX[gorjeta]) {
      valorGorjeta = gorjeta;
      chavePix = CHAVES_PIX[gorjeta];
    }

    // NUMERA√á√ÉO SIMPLES: Gerar n√∫mero do pedido no formato 0, 1, 2, 3...
    const csv = await buscarCsvDaPlanilha(PLANILHA_CSV_URL);
    const numeroPedido = await gerarNumeroPedidoSimples(csv);

    // Formata√ß√£o da mensagem do Telegram (movida do frontend)
    let textoTelegram = `üé∂ *Novo Pedido de M√∫sica N¬∫${numeroPedido}* üé∂\nüë§ ${nome}`;
    textoTelegram += `\nüéµ ${musica}`;
    
    if (valorGorjeta) {
      textoTelegram += `\nüí∞ R$${valorGorjeta}`;
    }
    if (mensagem) {
      textoTelegram += `\nüíå ${mensagem}`;
    }
    if (telefone) {
      const telefoneNumeros = telefone.replace(/\D/g, '');
      textoTelegram += `\nüìû ${telefoneNumeros}`;
    }
    
    if (consentimento) {
      textoTelegram += `\n‚úÖ Quero ficar por dentro de novas experi√™ncias musicais como esta. Aceito receber mensagens suas.`;
    }

    // Enviar para Telegram com RETRY
    const telegramSuccess = await enviarParaTelegramComRetry(textoTelegram, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID);
    
    if (!telegramSuccess) {
      throw new Error('Falha ao enviar mensagem para o Telegram ap√≥s m√∫ltiplas tentativas');
    }

    // Resposta para o frontend (sem dados sens√≠veis)
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        success: true,
        numeroPedido: numeroPedido,
        temGorjeta: !!valorGorjeta,
        chavePix: chavePix || null,
        isOutroValor: gorjeta === 'outro'
      })
    };

  } catch (error) {
    console.error('‚ùå Erro no envio do pedido:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        success: false, 
        error: 'Erro interno do servidor. Tente novamente.' 
      })
    };
  }
};

/**
 * Fun√ß√£o para buscar CSV da planilha Google Sheets
 */
async function buscarCsvDaPlanilha(planilhaUrl) {
  console.log('Iniciando fetch do CSV da planilha...');
  
  if (!planilhaUrl) {
    throw new Error('URL da planilha n√£o configurada');
  }
  
  const response = await fetch(planilhaUrl);
  if (!response.ok) {
    console.error('Erro ao buscar CSV:', response.status);
    throw new Error('Falha ao buscar a planilha CSV');
  }
  
  const csv = await response.text();
  console.log('CSV recebido (primeiros 200 caracteres):', csv.slice(0, 200));
  return csv;
}

/**
 * Fun√ß√£o para ler a c√©lula C1 da planilha (primeira linha, terceira coluna)
 */
function lerCelulaC1(csv) {
  if (!csv) {
    console.log('CSV vazio ou inv√°lido');
    return '';
  }
  
  const linhas = csv.split('\n');
  if (linhas.length < 1) {
    console.log('CSV n√£o possui primeira linha');
    return '';
  }
  
  const primeiraLinha = linhas[0];
  const colunas = primeiraLinha.split(',');
  
  if (colunas.length < 3) {
    console.log('Primeira linha n√£o possui coluna C');
    return '';
  }
  
  const valorC1 = colunas[2].trim();
  console.log(`Valor encontrado na c√©lula C1: "${valorC1}"`);
  return valorC1;
}

/**
 * Fun√ß√£o para validar se uma string est√° no formato de data AAAA-MM-DD
 */
function dataValida(dataStr) {
  const regex = /^\d{4}-\d{2}-\d{2}$/;
  if (!regex.test(dataStr)) {
    console.log(`Formato de data inv√°lido: "${dataStr}"`);
    return false;
  }
  
  const d = new Date(dataStr);
  const isValidDate = d instanceof Date && !isNaN(d);
  
  if (!isValidDate) {
    console.log(`Data inv√°lida: "${dataStr}"`);
    return false;
  }
  
  console.log(`Data v√°lida: "${dataStr}"`);
  return true;
}

/**
 * NUMERA√á√ÉO SIMPLES: Gera n√∫meros sequenciais 0, 1, 2, 3...
 * 
 * ESTRAT√âGIA:
 * 1. L√™ a data da c√©lula C1
 * 2. Calcula minutos desde o in√≠cio da data
 * 3. Divide em per√≠odos de 6 horas (360 minutos)
 * 4. Dentro de cada per√≠odo, gera n√∫meros sequenciais simples baseados em minutos
 * 5. Reinicia em 0 a cada novo per√≠odo de 6 horas
 */
async function gerarNumeroPedidoSimples(csv) {
  const agora = Date.now();
  console.log('=== IN√çCIO GERA√á√ÉO N√öMERO PEDIDO SIMPLES (0, 1, 2...) ===');
  console.log(`Timestamp atual: ${agora}`);
  
  // PASSO 1: Ler data da c√©lula C1
  const dataAtual = lerCelulaC1(csv);
  console.log(`Data na C1: "${dataAtual}"`);
  
  // PASSO 2: Verificar se a data √© v√°lida
  if (!dataValida(dataAtual)) {
    console.log(`Data inv√°lida: "${dataAtual}". Retornando 0.`);
    return 0; // Sempre come√ßar em 0 quando data inv√°lida
  }
  
  // PASSO 3: Converter data para timestamp do in√≠cio do dia (UTC)
  const dataObj = new Date(dataAtual + 'T00:00:00.000Z');
  const timestampInicioData = dataObj.getTime();
  
  console.log(`Data objeto: ${dataObj.toISOString()}`);
  console.log(`Timestamp in√≠cio da data: ${timestampInicioData}`);
  
  // PASSO 4: Calcular minutos desde o in√≠cio da data
  const tempoDecorrido = agora - timestampInicioData;
  const minutosDesdeInicio = Math.floor(tempoDecorrido / (60 * 1000));
  
  console.log(`Tempo decorrido: ${tempoDecorrido}ms`);
  console.log(`Minutos desde in√≠cio da data: ${minutosDesdeInicio}`);
  
  // PASSO 5: Calcular per√≠odo de 6 horas atual
  const MINUTOS_6H = 6 * 60; // 360 minutos = 6 horas
  const periodoAtual = Math.floor(minutosDesdeInicio / MINUTOS_6H);
  const minutoNoPeriodo = minutosDesdeInicio % MINUTOS_6H;
  
  console.log(`Per√≠odo de 6h atual: ${periodoAtual}`);
  console.log(`Minuto no per√≠odo (0-359): ${minutoNoPeriodo}`);
  
  // PASSO 6: Gerar n√∫mero sequencial simples
  // Usar segundos dentro do minuto para ter mais granularidade
  const segundosNoMinuto = Math.floor((tempoDecorrido % (60 * 1000)) / 1000);
  
  // N√∫mero sequencial: minuto no per√≠odo * 60 + segundos
  // Isso gera n√∫meros de 0 a 21599 por per√≠odo (360 * 60 - 1)
  const numeroSequencial = minutoNoPeriodo * 60 + segundosNoMinuto;
  
  console.log(`Segundos no minuto atual: ${segundosNoMinuto}`);
  console.log(`N√∫mero sequencial calculado: ${numeroSequencial}`);
  
  // PASSO 7: Limitar a um range menor para n√∫meros mais simples
  // Usar apenas os minutos (0-359) para ter n√∫meros menores
  const numeroFinal = minutoNoPeriodo;
  
  console.log(`N√∫mero final (apenas minutos): ${numeroFinal}`);
  console.log('=== FIM GERA√á√ÉO N√öMERO PEDIDO SIMPLES ===');
  
  return numeroFinal;
}

/**
 * VERS√ÉO ALTERNATIVA: N√∫meros ainda mais simples (0-99)
 * Reinicia a cada 100 minutos dentro do per√≠odo de 6 horas
 */
async function gerarNumeroPedidoMuitoSimples(csv) {
  const agora = Date.now();
  console.log('=== IN√çCIO GERA√á√ÉO N√öMERO MUITO SIMPLES (0-99) ===');
  
  const dataAtual = lerCelulaC1(csv);
  console.log(`Data na C1: "${dataAtual}"`);
  
  if (!dataValida(dataAtual)) {
    console.log(`Data inv√°lida. Retornando 0.`);
    return 0;
  }
  
  // Converter data para timestamp do in√≠cio do dia
  const dataObj = new Date(dataAtual + 'T00:00:00.000Z');
  const timestampInicioData = dataObj.getTime();
  
  // Calcular minutos desde o in√≠cio da data
  const tempoDecorrido = agora - timestampInicioData;
  const minutosDesdeInicio = Math.floor(tempoDecorrido / (60 * 1000));
  
  // Per√≠odo de 6 horas = 360 minutos
  const MINUTOS_6H = 6 * 60;
  const periodoAtual = Math.floor(minutosDesdeInicio / MINUTOS_6H);
  const minutoNoPeriodo = minutosDesdeInicio % MINUTOS_6H;
  
  // Limitar a 100 n√∫meros (0-99) por per√≠odo
  const numeroFinal = minutoNoPeriodo % 100;
  
  console.log(`Per√≠odo: ${periodoAtual}, Minuto no per√≠odo: ${minutoNoPeriodo}`);
  console.log(`N√∫mero final (0-99): ${numeroFinal}`);
  console.log('=== FIM GERA√á√ÉO N√öMERO MUITO SIMPLES ===');
  
  return numeroFinal;
}

/**
 * VERS√ÉO ULTRA SIMPLES: Apenas 0, 1, 2, 3, 4... at√© 59, depois reinicia
 * Baseado apenas no minuto atual da hora
 */
async function gerarNumeroPedidoUltraSimples(csv) {
  const agora = Date.now();
  console.log('=== IN√çCIO GERA√á√ÉO N√öMERO ULTRA SIMPLES (0-59) ===');
  
  const dataAtual = lerCelulaC1(csv);
  console.log(`Data na C1: "${dataAtual}"`);
  
  if (!dataValida(dataAtual)) {
    console.log(`Data inv√°lida. Retornando 0.`);
    return 0;
  }
  
  // Pegar apenas o minuto atual (0-59)
  const agora_date = new Date();
  const minutoAtual = agora_date.getMinutes();
  
  console.log(`Minuto atual: ${minutoAtual}`);
  console.log(`N√∫mero final: ${minutoAtual}`);
  console.log('=== FIM GERA√á√ÉO N√öMERO ULTRA SIMPLES ===');
  
  return minutoAtual;
}

/**
 * Fun√ß√£o para enviar mensagem ao Telegram com sistema de retry
 */
async function enviarParaTelegramComRetry(texto, token, chatId, maxTentativas = 3) {
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  
  for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {
    try {
      console.log(`üîÑ Tentativa ${tentativa}/${maxTentativas} de envio ao Telegram`);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: texto,
          parse_mode: 'Markdown'
        })
      });

      const data = await response.json();

      if (response.ok && data.ok) {
        console.log(`‚úÖ Mensagem enviada com sucesso na tentativa ${tentativa}`);
        return true;
      } else {
        console.error(`‚ùå Erro na tentativa ${tentativa}:`, data);
        
        if (response.status === 429) {
          const retryAfter = data.parameters?.retry_after || 1;
          console.log(`‚è≥ Rate limit detectado. Aguardando ${retryAfter} segundos...`);
          await sleep(retryAfter * 1000);
        } else if (tentativa < maxTentativas) {
          const delayMs = tentativa * 1000;
          console.log(`‚è≥ Aguardando ${delayMs}ms antes da pr√≥xima tentativa...`);
          await sleep(delayMs);
        }
      }
    } catch (error) {
      console.error(`‚ùå Erro de rede na tentativa ${tentativa}:`, error);
      
      if (tentativa < maxTentativas) {
        const delayMs = tentativa * 2000;
        console.log(`‚è≥ Aguardando ${delayMs}ms antes da pr√≥xima tentativa...`);
        await sleep(delayMs);
      }
    }
  }

  console.error(`‚ùå Falha ao enviar mensagem ap√≥s ${maxTentativas} tentativas`);
  return false;
}

/**
 * Fun√ß√£o auxiliar para aguardar um tempo espec√≠fico
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

